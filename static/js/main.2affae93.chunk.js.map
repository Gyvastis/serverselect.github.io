{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","currencies","USD","currency","servers","cpuBenchmarks","Promise","all","fetch","then","response","json","forEach","serverList","filter","server","available","storage","push","provider","meta","setState","map","price","unit","value","Math","round","id","shortid","generate","benchmarks","idx","lunr","this","field","doc","i","add","toString","getMatchingCpuBenchmark","cpuName","result","search","length","parseInt","ref","score","cpuScore","cpu","name","getServerId","continent","Object","values","countries","country","location","memory","amount","type","bandwidthSpeed","bandwidthLimit","md5","groupedPrices","predictedPrices","keys","sort","predictedPrice","columns","column","dataField","text","formatter","data","target","rel","href","firstBy","v","thenBy","a","b","amout","className","loading","keyField","frequency","cores","ram","connType","toFixed","city","url","bootstrap4","bordered","hover","condensed","rowStyle","row","rowIndex","parseFloat","backgroundColor","React","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2affae93.chunk.js","sourcesContent":["import React from 'react';\nimport shortid from 'shortid';\nimport firstBy from 'thenby';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport lunr from 'lunr';\nimport md5 from 'md5';\nimport { countries } from 'countries-list';\nimport './App.css';\n\nconst fetchServers = () =>\n    fetch('https://raw.githubusercontent.com/serverselect/node-server-scraper/master/output/output.json')\n        .then(response => response.json())\n        .then(response => {\n            const servers = [];\n\n            response.forEach(serverList => {\n                serverList.servers.filter(server => server.available).forEach(server => {\n                    server.storage.forEach(storage => {\n                        servers.push({\n                            ...server,\n                            storage,\n                            provider: serverList.meta.provider,\n                        });\n                    })\n                });\n            });\n\n            return servers;\n        });\n\nconst fetchCurrencies = () =>\n    fetch(\"http://data.fixer.io/api/latest?access_key=553a7ee7b07bf316af731f3c0bf251f7\")\n        .then(response => response.json())\n        .then(({ rates }) => rates);\n\nconst fetchCpuBenchmarks = () =>\n    fetch(\"https://raw.githubusercontent.com/ServerSelect/node-cpu-benchmark-scraper/main/output/output.json\")\n        .then(response => response.json())\n        .then(({ benchmarks }) => benchmarks);\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencies: {\n                USD: 1.18,\n            },\n            currency: 'EUR',\n            servers: [],\n            cpuBenchmarks: []\n        };\n    }\n\n    componentDidMount() {\n        // fetchCurrencies().then(currencies => {\n        //     this.setState({\n        //         ...this.state,\n        //         currencies,\n        //     });\n        // });\n\n        Promise.all([\n            fetchServers().then(servers => {\n                this.setState({\n                    ...this.state,\n                    servers: servers.map(server => {\n                        let price = server.price;\n\n                        if(price.unit !== 'EUR') {\n                            price = {\n                                value: Math.round(server.price.value / this.state.currencies[server.price.unit] * 10) / 10,\n                                unit: 'EUR'\n                            };\n                        }\n                        \n                        return {\n                            ...server,\n                            price,\n                            id: shortid.generate(),\n                        }\n                    })\n                });\n            }),\n            fetchCpuBenchmarks().then(cpuBenchmarks => {\n                this.setState({\n                    ...this.state,\n                    cpuBenchmarks,\n                });\n            })\n        ]).then(() => {\n            const cpuBenchmarks = this.state.cpuBenchmarks;\n            var idx = lunr(function () {\n                this.field('cpu')\n\n                cpuBenchmarks.forEach(function (doc, i) {\n                    this.add({\n                        ...doc,\n                        id: i.toString()\n                    })\n                }, this);\n            });\n\n            const getMatchingCpuBenchmark = cpuName => {\n                const result = idx.search(cpuName);\n    \n                if(result.length > 0) {\n                    return cpuBenchmarks[parseInt(result[0].ref)].score;\n                }\n                else {\n                    return -1;\n                }\n            };\n\n            const servers = this.state.servers;\n            this.setState({\n                ...this.state,\n                servers: servers.map(server => ({\n                    ...server,\n                    cpuScore: getMatchingCpuBenchmark(server.cpu.name),\n                    id: shortid.generate(),\n                }))\n            });\n        }).then(() => {\n            const getServerId = server => {\n                let continent = '';\n                Object.values(countries).forEach(country => {\n                    if(country.name === server.location.country) {\n                        continent = country.continent;\n                    }\n                })\n                let id = `${Math.round(server.cpuScore / 100) * 100}`;\n                id += `_${server.memory.value}-${server.memory.unit}`;\n                id += `_${server.storage.amount}x-${server.storage.value}-${server.storage.unit}-${server.storage.type}`;\n                id += `_${server.bandwidthSpeed.value}-${server.bandwidthSpeed.unit}`;\n                id += `_${server.bandwidthLimit.value > 0 ? 1 : 0}`;\n                id += `_${continent}`;\n                // console.log(id)\n                return md5(id);\n            }\n            let groupedPrices = {};\n            this.state.servers.map(server => {\n                const id = getServerId(server);\n\n                if(!groupedPrices[id]) {\n                    groupedPrices[id] = [];\n                }\n\n                groupedPrices[id].push(server.price.value);\n            });\n\n            let predictedPrices = {};\n            Object.keys(groupedPrices).map(id => {\n                predictedPrices[id] = groupedPrices[id].sort()[0] || -1;\n            });\n\n            this.setState({\n                ...this.state,\n                servers: this.state.servers.map(server => ({\n                    ...server,\n                    predictedPrice: predictedPrices[getServerId(server)]\n                }))\n            });\n        });\n    }\n\n    render() {\n        const columns = [\n            'provider',\n            'cpu',\n            'cpuScore',\n            'ram',\n            'storage',\n            'bandwidthSpeed',\n            'bandwidthLimit',\n            'price',\n            'predictedPrice',\n            'location',\n            'url',\n        ].map(column => ({\n            dataField: column,\n            text: column,\n            formatter: column === 'url' ? data => <a target=\"_blank\" rel=\"noopener noreferrer\" href={ data }>view</a> : null\n        }));\n\n        const servers = this.state.servers.sort(\n            firstBy(v => v.price.value)\n            .thenBy((a, b) => a.cpuScore < b.cpuScore)\n            .thenBy((a, b) => a.memory.amout < b.memory.amout)\n        );\n\n        const rowStyle = (row, rowIndex) => {\n            if(parseFloat(row.predictedPrice) > 0) {\n                if(Math.round(parseFloat(row.predictedPrice)) < Math.round(parseFloat(row.price))) {\n                    return { backgroundColor: 'rgba(255, 0, 0, 0.1)' };\n                }\n                else if(Math.round(parseFloat(row.predictedPrice)) > Math.round(parseFloat(row.price))) {\n                    return { backgroundColor: 'rgba(0, 255, 0, 0.1)' };\n                }\n            }\n\n            return  {};\n        };\n\n        return (\n            <div className=\"App\">\n                <h1>Best Dedicated Servers</h1>\n                <div>{this.state.currency}. Sorted by price + cpuScore + memory</div>\n                <BootstrapTable\n                    loading={this.state.servers <= 0}\n                    keyField='id'\n                    data={servers.map(server => ({\n                        id: server.id,\n                        provider: server.provider,\n                        cpu: `${server.cpu.amount}x ${server.cpu.frequency} ${server.cpu.name} ${server.cpu.cores} cores`,\n                        cpuScore: server.cpuScore,\n                        ram: `${server.memory.value} ${server.memory.unit} ${server.memory.type}`,\n                        storage: `${server.storage.amount}x ${server.storage.value} ${server.storage.unit} ${server.storage.type} ${server.storage.connType}`,\n                        bandwidthSpeed: `${server.bandwidthSpeed.value} ${server.bandwidthSpeed.unit}`,\n                        bandwidthLimit: server.bandwidthLimit.value > 0 ? `${server.bandwidthLimit.value} ${server.bandwidthLimit.unit}` : `∞`,\n                        price: `${server.price.value.toFixed(2)}`,\n                        predictedPrice: `${server.predictedPrice > 0 ? server.predictedPrice.toFixed(2) : '-'}`,\n                        location: `${server.location.city}, ${server.location.country}`,\n                        url: server.url,\n                    }))}\n                    columns={columns}\n                    bootstrap4={true}\n                    bordered={true}\n                    hover={true}\n                    condensed={true}\n                    rowStyle={rowStyle}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}