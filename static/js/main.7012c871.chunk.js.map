{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","currencies","USD","currency","servers","this","setServers","fetch","then","response","text","parseStringPromise","object","Object","values","Cube","map","rawCurrencies","forEach","parseFloat","rate","setState","json","serverList","filter","server","available","push","provider","meta","id","shortid","generate","sort","firstBy","v","price","value","columns","column","dataField","unit","className","loading","keyField","data","cpu","amount","frequency","name","cores","ram","memory","type","storage","connType","join","bandwidthSpeed","bandwidthLimit","toFixed","location","city","country","bootstrap4","bordered","hover","striped","condensed","rowStyle","row","rowIndex","React","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7012c871.chunk.js","sourcesContent":["import React from 'react';\n// import fs from 'fs';\n// import logo from './logo.svg';\nimport _ from 'lodash';\nimport shortid from 'shortid';\nimport firstBy from 'thenby';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport { parseStringPromise } from 'xml2js';\nimport './App.css';\n\nconst fetchServers = () =>\n    fetch('https://raw.githubusercontent.com/rapidscrape/best-dedicated-servers/master/output/output.json')\n        .then(response => response.json())\n        .then(response => {\n            const servers = [];\n\n            response.forEach(serverList => {\n                serverList.servers.filter(server => server.available).forEach(server => {\n                    servers.push({\n                        ...server,\n                        provider: serverList.meta.provider,\n                    });\n                });\n            });\n\n            return servers;\n        });\n\nconst fetchCurrencies = () =>\n    fetch(\"https://cors-anywhere.herokuapp.com/https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml\", {\n        \"headers\": {\n            \"X-Requested-With\": \"/https://www.ecb.europa.eu\",\n        }\n    })\n        .then(response => response.text())\n        .then(parseStringPromise)\n        .then(object => Object.values(object)[0].Cube[0].Cube[0].Cube.map(currency => Object.values(currency)[0]))\n        .then(rawCurrencies => {\n            const currencies = {};\n\n            rawCurrencies.forEach(currency => {\n               currencies[currency.currency] = parseFloat(currency.rate);\n            });\n\n            return currencies;\n        });\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencies: {\n                USD: 1,\n            },\n            currency: 'EUR',\n            servers: [],\n        };\n    }\n\n    componentDidMount() {\n        this.setServers();\n    }\n\n    setServers() {\n        fetchCurrencies().then(currencies => {\n            this.setState({\n                ...this.state,\n                currencies,\n            });\n        })\n        fetchServers()\n            .then(servers => {\n                this.setState({\n                    ...this.state,\n                    servers: servers.map(server => ({\n                        ...server,\n                        id: shortid.generate(),\n                    }))\n                    .sort(firstBy(v => v.price.value)\n                        // .thenBy((a, b) => parseFloat(a.cpu.frequency.replace(' Ghz')) > parseFloat(b.cpu.frequency.replace(' Ghz')))\n                        // .thenBy((a, b) => a.memory.amout > b.memory.amout)\n                        // .thenBy((a, b) => a.cpu.cores > b.cpu.cores)\n                        // .thenBy((a, b) => a.storage.type === 'SSD' ? -1 : (b.storage.type === 'SSD' ? 1 : 0))\n                        // .thenBy((a, b) => (a.storage.size * a.storage.amount * (a.storage.unit === 'TB' ? 1000 : 1)) > (b.storage.size * b.storage.amount * (b.storage.unit === 'TB' ? 1000 : 1)))\n                        // .thenBy((a, b) => (a.bandwidthSpeed.value * (a.bandwidthSpeed.unit === 'Gbps' ? 1024 : 1)) > (b.bandwidthSpeed.value * (b.bandwidthSpeed.value.unit === 'Gbps' ? 1024 : 1)))\n                        // .thenBy((a, b) => a.ip > b.ip)\n                    // )\n                ),\n            });\n        // .filter(server => server.price < filterPrice)\n        // .map(server => ({\n        //   ...server,\n        //   storage: _.sortBy(server.storage, storage => storage.type).reverse()[0],\n        // }))\n        //   });\n        });\n    }\n\n    render() {\n        const columns = [\n            'provider',\n            'cpu',\n            'ram',\n            'storage',\n            'bandwidthSpeed',\n            'bandwidthLimit',\n            'price',\n            // 'ips',\n            'location',\n        ].map(column => ({\n            dataField: column,\n            text: column,\n        }));\n\n        const servers = this.state.servers.map(server => {\n            if(server.price.unit !== 'EUR') {\n                return {\n                    ...server,\n                    price: {\n                        value: server.price.value * this.state.currencies[server.price.unit],\n                        unit: 'EUR'\n                    }\n                };\n            }\n\n            return server;\n        });\n\n        // const filterPrice = 100;\n        // const avg = filterPrice / 3;\n\n        // const avg = _.mean(servers.map(server => server.price.value));\n        // console.log(avg)\n\n        const rowStyle = (row, rowIndex) => {\n            // if (parseFloat(row.price) > avg) return {};\n            //\n            // return { backgroundColor: 'cyan' };\n        };\n\n        return (\n            <div className=\"App\">\n                <h1>Best Dedicated Servers</h1>\n                <div>{this.state.currency}</div>\n                <BootstrapTable\n                    loading={this.state.servers <= 0}\n                    keyField='id'\n                    data={servers.map(server => ({\n                        id: server.id,\n                        provider: server.provider,\n                        cpu: `${server.cpu.amount}x ${server.cpu.frequency} ${server.cpu.name} ${server.cpu.cores} cores`,\n                        ram: `${server.memory.value} ${server.memory.unit} ${server.memory.type}`,\n                        storage: server.storage.map(storage => `${storage.amount}x ${storage.value} ${storage.unit} ${storage.type} ${storage.connType}`).join(' & '),\n                        bandwidthSpeed: `${server.bandwidthSpeed.value} ${server.bandwidthSpeed.unit}`,\n                        bandwidthLimit: server.bandwidthLimit.value > 0 ? `${server.bandwidthLimit.value} ${server.bandwidthLimit.unit}` : `âˆž`,\n                        price: `${server.price.value.toFixed(2)}`,\n                        // ips: '???',\n                        location: `${server.location.city}, ${server.location.country}`,\n                    }))}\n                    columns={columns}\n                    bootstrap4={true}\n                    bordered={true}\n                    hover={true}\n                    striped={true}\n                    condensed={true}\n                    rowStyle={rowStyle}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}