{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","currencies","USD","currency","servers","cpuBenchmarks","Promise","all","fetch","then","response","json","forEach","serverList","filter","server","available","push","provider","meta","setState","map","id","shortid","generate","benchmarks","idx","lunr","this","field","doc","i","add","toString","getMatchingCpuBenchmark","cpuName","result","search","length","parseInt","ref","score","cpuScore","cpu","name","columns","column","dataField","text","formatter","data","target","rel","href","price","unit","value","Math","round","sort","firstBy","v","thenBy","a","b","memory","amout","className","loading","keyField","amount","frequency","cores","ram","type","storage","connType","join","bandwidthSpeed","bandwidthLimit","toFixed","location","city","country","url","bootstrap4","bordered","hover","striped","condensed","rowStyle","row","rowIndex","React","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f10626b0.chunk.js","sourcesContent":["import React from 'react';\nimport shortid from 'shortid';\nimport firstBy from 'thenby';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport lunr from 'lunr';\nimport './App.css';\n\nconst fetchServers = () =>\n    fetch('https://raw.githubusercontent.com/serverselect/node-server-scraper/master/output/output.json')\n        .then(response => response.json())\n        .then(response => {\n            const servers = [];\n\n            response.forEach(serverList => {\n                serverList.servers.filter(server => server.available).forEach(server => {\n                    servers.push({\n                        ...server,\n                        provider: serverList.meta.provider,\n                    });\n                });\n            });\n\n            return servers;\n        });\n\nconst fetchCurrencies = () =>\n    fetch(\"http://data.fixer.io/api/latest?access_key=553a7ee7b07bf316af731f3c0bf251f7\")\n        .then(response => response.json())\n        .then(({ rates }) => rates);\n\nconst fetchCpuBenchmarks = () =>\n    fetch(\"https://raw.githubusercontent.com/ServerSelect/node-cpu-benchmark-scraper/main/output/output.json\")\n        .then(response => response.json())\n        .then(({ benchmarks }) => benchmarks);\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencies: {\n                USD: 1.18,\n            },\n            currency: 'EUR',\n            servers: [],\n            cpuBenchmarks: []\n        };\n    }\n\n    componentDidMount() {\n        // fetchCurrencies().then(currencies => {\n        //     this.setState({\n        //         ...this.state,\n        //         currencies,\n        //     });\n        // });\n\n        Promise.all([\n            fetchServers().then(servers => {\n                this.setState({\n                    ...this.state,\n                    servers: servers.map(server => ({\n                        ...server,\n                        id: shortid.generate(),\n                    }))\n                });\n            }),\n            fetchCpuBenchmarks().then(cpuBenchmarks => {\n                this.setState({\n                    ...this.state,\n                    cpuBenchmarks,\n                });\n            })\n        ]).then(() => {\n            const cpuBenchmarks = this.state.cpuBenchmarks;\n            var idx = lunr(function () {\n                this.field('cpu')\n\n                cpuBenchmarks.forEach(function (doc, i) {\n                    this.add({\n                        ...doc,\n                        id: i.toString()\n                    })\n                }, this);\n            });\n\n            const getMatchingCpuBenchmark = cpuName => {\n                const result = idx.search(cpuName);\n    \n                if(result.length > 0) {\n                    return cpuBenchmarks[parseInt(result[0].ref)].score;\n                }\n                else {\n                    return -1;\n                }\n            };\n\n            const servers = this.state.servers;\n            this.setState({\n                ...this.state,\n                servers: servers.map(server => ({\n                    ...server,\n                    cpuScore: getMatchingCpuBenchmark(server.cpu.name),\n                    id: shortid.generate(),\n                }))\n            });\n        });\n    }\n\n    render() {\n        const columns = [\n            'provider',\n            'cpu',\n            'cpuScore',\n            'ram',\n            'storage',\n            'bandwidthSpeed',\n            'bandwidthLimit',\n            'price',\n            'location',\n            'url',\n        ].map(column => ({\n            dataField: column,\n            text: column,\n            formatter: column === 'url' ? data => <a target=\"_blank\" rel=\"noopener noreferrer\" href={ data }>view</a> : null\n        }));\n\n        const servers = this.state.servers.map(server => {\n            if(server.price.unit !== 'EUR') {\n                return {\n                    ...server,\n                    price: {\n                        value: Math.round(server.price.value / this.state.currencies[server.price.unit] * 10) / 10,\n                        unit: 'EUR'\n                    }\n                };\n            }\n\n            return server;\n        }).sort(\n            firstBy(v => v.price.value)\n            .thenBy((a, b) => a.cpuScore < b.cpuScore)\n            .thenBy((a, b) => a.memory.amout < b.memory.amout)\n        );\n\n        // const filterPrice = 100;\n        // const avg = filterPrice / 3;\n\n        // const avg = _.mean(servers.map(server => server.price.value));\n        // console.log(avg)\n\n        const rowStyle = (row, rowIndex) => {\n            // if (parseFloat(row.price) > avg) return {};\n            //\n            // return { backgroundColor: 'cyan' };\n        };\n\n        return (\n            <div className=\"App\">\n                <h1>Best Dedicated Servers</h1>\n                <div>{this.state.currency}. Sorted by price + cpuScore + memory</div>\n                <BootstrapTable\n                    loading={this.state.servers <= 0}\n                    keyField='id'\n                    data={servers.map(server => ({\n                        id: server.id,\n                        provider: server.provider,\n                        cpu: `${server.cpu.amount}x ${server.cpu.frequency} ${server.cpu.name} ${server.cpu.cores} cores`,\n                        cpuScore: server.cpuScore,\n                        ram: `${server.memory.value} ${server.memory.unit} ${server.memory.type}`,\n                        storage: server.storage.map(storage => `${storage.amount}x ${storage.value} ${storage.unit} ${storage.type} ${storage.connType}`).join(' or '),\n                        bandwidthSpeed: `${server.bandwidthSpeed.value} ${server.bandwidthSpeed.unit}`,\n                        bandwidthLimit: server.bandwidthLimit.value > 0 ? `${server.bandwidthLimit.value} ${server.bandwidthLimit.unit}` : `∞`,\n                        price: `${server.price.value.toFixed(2)}`,\n                        location: `${server.location.city}, ${server.location.country}`,\n                        url: server.url,\n                    }))}\n                    columns={columns}\n                    bootstrap4={true}\n                    bordered={true}\n                    hover={true}\n                    striped={true}\n                    condensed={true}\n                    rowStyle={rowStyle}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}